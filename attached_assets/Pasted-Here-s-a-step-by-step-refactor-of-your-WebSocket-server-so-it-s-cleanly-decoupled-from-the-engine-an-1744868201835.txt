Here’s a step‑by‑step refactor of your WebSocket server so it’s cleanly decoupled from the engine and ready to power your web client interface:

⸻

1. Create a Dedicated Server Class

# mud_server.py
import asyncio
import logging
import yaml
from websockets import serve, WebSocketServerProtocol
from engine import MudEngine
from world import World

logger = logging.getLogger(__name__)

class MudServer:
    def __init__(self, host: str, port: int, config_path: str = "config.yaml"):
        # Load config
        cfg = yaml.safe_load(open(config_path))
        self.host = cfg.get("host", host)
        self.port = cfg.get("port", port)

        # Initialize engine & world
        self.world = World(cfg["world_yaml"])
        self.engine = MudEngine(self.world)
        self.sessions: dict[WebSocketServerProtocol, str] = {}  # ws → player_id

    async def handler(self, ws: WebSocketServerProtocol, path: str):
        """Handle a single client connection."""
        player_id = await self._login(ws)
        try:
            async for raw in ws:
                # Dispatch input into the engine
                out = await self.engine.process_message(player_id, raw)
                if out:
                    await ws.send(out)
        except Exception:
            logger.exception("Error in WS handler for %s", player_id)
        finally:
            await self._logout(ws, player_id)

    async def _login(self, ws: WebSocketServerProtocol) -> str:
        """On connect, perform handshake and create a new player session."""
        await ws.send("Welcome to SS13‑Mud! Enter your handle:")
        name = await ws.recv()
        player_id = self.engine.add_player(name)
        self.sessions[ws] = player_id
        # Announce join
        join_msg = f"* {name} has boarded the station."
        for other_ws in self.sessions:
            if other_ws is not ws:
                await other_ws.send(join_msg)
        return player_id

    async def _logout(self, ws: WebSocketServerProtocol, player_id: str):
        """Clean up when a client disconnects."""
        name = self.engine.get_player_name(player_id)
        self.engine.remove_player(player_id)
        del self.sessions[ws]
        leave_msg = f"* {name} has left the station."
        for other_ws in self.sessions:
            await other_ws.send(leave_msg)

    def run(self):
        """Start the asyncio WebSocket server."""
        logging.basicConfig(level=logging.INFO)
        start = serve(self.handler, self.host, self.port)
        logger.info("Starting MUD server on %s:%d", self.host, self.port)
        asyncio.get_event_loop().run_until_complete(start)
        asyncio.get_event_loop().run_forever()

if __name__ == "__main__":
    MudServer(host="0.0.0.0", port=8765).run()



⸻

2. Key Improvements
	1.	Single logging.basicConfig in __main__, not in every module.
	2.	Config‑driven host/port (falls back to defaults if missing).
	3.	Clean session mapping (ws ↔ player_id)—no global vars.
	4.	Async/await only—no blocking I/O in the handler.
	5.	Simple login/logout workflow that your web client can mirror.

⸻

3. Hooking Up Engine Events

To push engine‑initiated broadcasts (alarms, atmos updates, etc.) into connected clients, add to your engine an event callback:

# In engine.py (MudEngine.__init__)
self._broadcast_listeners = []

def on_broadcast(self, fn):
    self._broadcast_listeners.append(fn)

async def broadcast(self, message: str):
    for fn in self._broadcast_listeners:
        await fn(message)

Then, in your server setup:

# After self.engine = MudEngine(...)
self.engine.on_broadcast(lambda msg: self._fan_out(msg))

async def _fan_out(self, message: str):
    for ws in self.sessions:
        await ws.send(message)

Now any await engine.broadcast("…") will hit every client.

⸻

4. Frontend Expectations

Your webclient.html should:
	•	Open new WebSocket("ws://<host>:8765")
	•	Listen for messages and append them to a <pre> or <textarea>
	•	Send user input on Enter

With this setup, your browser UI and server speak the same simple string protocol, and the server cleanly hands off every message to the MUD engine.

⸻

Next Steps
	1.	Drop in this mud_server.py and wire up your existing engine.py / world.py.
	2.	Test: connect with both telnet and your web client to ensure parity.
	3.	Iterate: once stable, we can layer in command history, heartbeats, and reconnection logic.

Let me know how it goes or if you hit any specific errors!