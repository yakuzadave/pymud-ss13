name: Living Documentation for PyMUD-SS13

on:
  schedule:
    - cron: '0 2 * * 1'
  workflow_dispatch:
  push:
    paths:
      - 'src/**'
      - 'game/**'
      - 'commands/**'
      - 'world/**'
      - 'docs/**'
      - '*.py'

jobs:
  build-and-docs:
    runs-on: ubuntu-latest
    permissions:
      contents: write
      models: read
    env:
      TODAY: ${{ github.run_id }}

    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        with:
          fetch-depth: 0

      # ------ Caching for pip ------
      - name: Cache Python dependencies
        uses: actions/cache@v4
        with:
          path: ~/.cache/pip
          key: ${{ runner.os }}-pip-${{ hashFiles('requirements.txt') }}
          restore-keys: |
            ${{ runner.os }}-pip-

      # ------ Install Python + doc dependencies ------
      - name: Install dependencies and doc tools
        run: |
          set -euo pipefail
          pip install --upgrade pip
          pip install -r requirements.txt
          pip install sphinx==7.2.6 sphinx-rtd-theme==2.0.0 pydoc-markdown==4.7.0
          pip install mkdocs==1.5.3 mkdocs-material==9.5.9 mkdocs-mermaid2-plugin==1.1.1

      # ------ Run Tests ------
      - name: Run tests
        run: |
          set -euo pipefail
          pytest --junitxml=pytest-results.xml

      - name: Upload test results
        if: always()
        uses: actions/upload-artifact@v4
        with:
          name: pytest-results-${{ env.TODAY }}
          path: pytest-results.xml

      # ------ Analyze MUD Code Coverage ------
      - name: Analyze MUD Code Coverage
        run: |
          set -euo pipefail
          mkdir -p .github/ai-inputs/documentation
          echo "# PyMUD-SS13 Documentation Analysis" > .github/ai-inputs/documentation/project-context.md
          echo "" >> .github/ai-inputs/documentation/project-context.md
          echo "## Code Structure Analysis" >> .github/ai-inputs/documentation/project-context.md
          echo "### Undocumented Functions" >> .github/ai-inputs/documentation/project-context.md
          find . -name "*.py" -not -path "./venv/*" -not -path "./.git/*" | while read -r file; do
            undoc_funcs=$(grep -A1 '^\s*def\s' "$file" | grep -v '"""' | wc -l)
            undoc_classes=$(grep -A1 '^class\s' "$file" | grep -v '"""' | wc -l)
            if [ "$undoc_funcs" -gt 0 ] || [ "$undoc_classes" -gt 0 ]; then
              echo "- $file: $undoc_funcs functions, $undoc_classes classes" \
                >> .github/ai-inputs/documentation/project-context.md
            fi
          done
          echo "" >> .github/ai-inputs/documentation/project-context.md
          echo "## Game Commands Analysis" >> .github/ai-inputs/documentation/project-context.md
          if [ -d "commands" ]; then
            find commands -name "*.py" -exec basename {} .py \; | sort \
              >> .github/ai-inputs/documentation/project-context.md
          fi
          echo "" >> .github/ai-inputs/documentation/project-context.md
          echo "## Game Systems" >> .github/ai-inputs/documentation/project-context.md
          for system in combat atmosphere jobs roles departments; do
            if [ -f "game/$system.py" ] || [ -f "src/$system.py" ]; then
              echo "- $system system found" \
                >> .github/ai-inputs/documentation/project-context.md
            fi
          done
          echo "" >> .github/ai-inputs/documentation/project-context.md
          echo "## Recent Changes (Last 7 Days)" \
            >> .github/ai-inputs/documentation/project-context.md
          git log --since="7 days ago" --pretty=format:"- %s (%h by %an)" \
            | head -20 \
            >> .github/ai-inputs/documentation/project-context.md
          echo "" >> .github/ai-inputs/documentation/project-context.md
          echo "## Configuration" \
            >> .github/ai-inputs/documentation/project-context.md
          for config in config.py settings.py requirements.txt setup.py; do
            if [ -f "$config" ]; then
              echo "### $config" >> .github/ai-inputs/documentation/project-context.md
              echo '```python' >> .github/ai-inputs/documentation/project-context.md
              head -30 "$config" >> .github/ai-inputs/documentation/project-context.md
              echo '```' >> .github/ai-inputs/documentation/project-context.md
            fi
          done

      - name: Upload prompt/context artifacts
        uses: actions/upload-artifact@v4
        with:
          name: ai-prompt-context-${{ env.TODAY }}
          path: .github/ai-inputs/documentation

      # ------ AI PROMPT & DOC GENERATION ------
      - name: Read Prompt Files
        id: prompts
        run: |
          set -euo pipefail
          SYSTEM_PROMPT=$(cat .github/prompts/documentation/mud-system.md 2>/dev/null || echo "You are a technical documentation specialist for PyMUD-SS13, a Python-based MUD server inspired by Space Station 13. Generate comprehensive documentation including player guides, developer documentation, and API references.")
          PROJECT_CONTEXT=$(< .github/ai-inputs/documentation/project-context.md)
          {
            echo "system_prompt<<EOF"
            echo "$SYSTEM_PROMPT"
            echo "EOF"
            echo "project_context<<EOF"
            echo "$PROJECT_CONTEXT"
            echo "EOF"
          } >> $GITHUB_OUTPUT

      - name: Generate MUD Documentation with AI
        uses: actions/ai-inference@v1
        id: docs
        with:
          model: "claude-3-7-sonnet"
          system-prompt: ${{ steps.prompts.outputs.system_prompt }}
          prompt: ${{ steps.prompts.outputs.project_context }}
          max-tokens: 4000

      - name: Verify AI Output is Non-Empty
        run: |
          set -euo pipefail
          if [ -z "${{ steps.docs.outputs.response }}" ]; then
            echo "AI output is empty. Exiting!"
            exit 1
          fi

      - name: Save AI Output as Artifact
        uses: actions/upload-artifact@v4
        with:
          name: ai-docs-raw-${{ env.TODAY }}
          path: .github/ai-outputs/docs/generated-docs-raw.md

      # ------ Section Extraction, Command Reference, Site Build (your existing python/mkdocs steps go here) ------
      # Example:
      # - name: Process Generated Documentation
      #   run: |
      #     set -euo pipefail
      #     # (python extraction script here)
      #
      # - name: Generate Command Reference
      #   run: |
      #     set -euo pipefail
      #     # (python script here)
      #
      # - name: Generate Interactive Documentation Site
      #   run: |
      #     set -euo pipefail
      #     # (mkdocs build here)

      # ------ Link Check ------
      - name: Check Documentation Links
        uses: lycheeverse/lychee-action@v1
        with:
          args: --no-progress --exclude 'github.com/.*#.*' 'site/**/*.html'

      - name: Deploy Documentation
        uses: peaceiris/actions-gh-pages@v4
        with:
          github_token: ${{ secrets.GITHUB_TOKEN }}
          publish_dir: ./site
          cname: pymud-ss13.example.com

      - name: Upload built docs site as artifact
        uses: actions/upload-artifact@v4
        with:
          name: site-preview-${{ env.TODAY }}
          path: site

      # ------ PR Automation ------
      - name: Create Documentation PR if Changes
        env:
          DOC_BRANCH: docs-update-${{ env.TODAY }}
        uses: peter-evans/create-pull-request@v5
        with:
          token: ${{ secrets.GITHUB_TOKEN }}
          commit-message: "ðŸ“š Update game documentation"
          title: "ðŸ“š Documentation Updates - ${{ env.TODAY }}"
          body: |
            ## Documentation Updates

            This PR contains automatically generated documentation updates:

            - Updated player guides  
            - Refreshed command reference  
            - Updated API documentation  
            - Added recent changelog entries

          branch: ${{ env.DOC_BRANCH }}
          delete-branch: true