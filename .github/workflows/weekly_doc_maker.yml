name: Living Documentation for PyMUD-SS13

on:
  schedule:
    - cron: '0 2 * * 1'
  workflow_dispatch:

jobs:
  build-and-docs:
    runs-on: ubuntu-latest
    permissions:
      contents: write
      models: read
    env:
      TODAY: ${{ github.run_id }}

    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        with:
          fetch-depth: 0

      # ------ Fetch Model Catalog & Pick Model ID ------
      - name: Fetch available AI models (GitHub Models API)
        id: fetch_models
        run: |
          set -euxo pipefail
          mkdir -p .github/ai-inputs
          curl -sSL -H "Authorization: Bearer ${{ secrets.GITHUB_TOKEN }}" \
               -H "Accept: application/vnd.github+json" \
               -H "X-GitHub-Api-Version: 2022-11-28" \
               https://api.github.com/models/catalog/models \
            | tee .github/ai-inputs/models-catalog.json
          # Select the first GPT model as default (customize as needed)
          jq -r '.[] | select(.id | test("^gpt-")) | .id' .github/ai-inputs/models-catalog.json | head -1 > .github/ai-inputs/model-id.txt

      - name: Export selected model id for downstream steps
        id: set_model_id
        run: |
          set -euxo pipefail
          echo "MODEL_ID=$(cat .github/ai-inputs/model-id.txt)" >> "$GITHUB_ENV"

      # ------ Caching for pip ------
      - name: Cache Python dependencies
        uses: actions/cache@v4
        with:
          path: ~/.cache/pip
          key: ${{ runner.os }}-pip-${{ hashFiles('**/requirements.txt') }}
          restore-keys: |
            ${{ runner.os }}-pip-

      # ------ Install Python + doc dependencies ------
      - name: Install dependencies and doc tools
        run: |
          set -euxo pipefail
          pip install --upgrade pip
          pip install -r requirements.txt
          pip install sphinx==7.2.6 sphinx-rtd-theme==2.0.0 pydoc-markdown==4.7.0
          pip install mkdocs==1.5.3 mkdocs-material==9.5.9 mkdocs-mermaid2-plugin==1.1.1

      # ------ Run Tests ------
      - name: Run tests
        run: |
          set -euxo pipefail
          echo "Running pytest"
          pytest --junitxml=pytest-results.xml

      - name: Upload test results
        if: always()
        uses: actions/upload-artifact@v4
        with:
          name: pytest-results-${{ env.TODAY }}
          path: pytest-results.xml

      # ------ Analyze MUD Code Coverage ------
      - name: Analyze MUD Code Coverage
        run: |
          set -euxo pipefail
          echo "Generating documentation context"
          python - <<'PY'
          import os
          import subprocess
          from pathlib import Path

          out_dir = Path('.github/ai-inputs/documentation')
          out_dir.mkdir(parents=True, exist_ok=True)
          ctx = out_dir / 'project-context.md'

          with ctx.open('w') as f:
              f.write('# PyMUD-SS13 Documentation Analysis\n\n')
              f.write('## Code Structure Analysis\n')
              f.write('### Undocumented Functions\n')

              python_files = [p for p in Path('.').rglob('*.py') if 'venv' not in p.parts and '.git' not in p.parts]
              if not python_files:
                  f.write('No Python files found.\n')
              for path in python_files:
                  lines = path.read_text().splitlines()
                  undoc_funcs = sum(
                      1 for i, line in enumerate(lines)
                      if line.lstrip().startswith('def ')
                      and (i + 1 >= len(lines) or '"""' not in lines[i + 1])
                  )
                  undoc_classes = sum(
                      1 for i, line in enumerate(lines)
                      if line.lstrip().startswith('class ')
                      and (i + 1 >= len(lines) or '"""' not in lines[i + 1])
                  )
                  if undoc_funcs or undoc_classes:
                      f.write(f'- {path}: {undoc_funcs} functions, {undoc_classes} classes\n')

              f.write('\n## Game Commands Analysis\n')
              cmd_dir = Path('commands')
              if cmd_dir.is_dir():
                  for cmd in sorted(cmd_dir.glob('*.py')):
                      f.write(f'{cmd.stem}\n')
              else:
                  f.write('No commands directory found.\n')

              f.write('\n## Game Systems\n')
              for system in ['combat', 'atmosphere', 'jobs', 'roles', 'departments']:
                  if Path(f'game/{system}.py').exists() or Path(f'src/{system}.py').exists():
                      f.write(f'- {system} system found\n')

              f.write('\n## Recent Changes (Last 7 Days)\n')
              result = subprocess.run(
                  ['git', 'log', '--since=7 days ago', '--pretty=format:- %s (%h by %an)'],
                  capture_output=True, text=True
              )
              recent = result.stdout.splitlines()[:20]
              if recent:
                  f.write('\n'.join(recent) + '\n')
              else:
                  f.write('No recent commits found.\n')

              f.write('\n## Configuration\n')
              for config in ['config.py', 'settings.py', 'requirements.txt', 'setup.py']:
                  cfg_path = Path(config)
                  if cfg_path.exists():
                      f.write(f'### {config}\n```python\n')
                      f.writelines(cfg_path.read_text().splitlines()[:30])
                      f.write('\n```\n')
          PY

      - name: Upload prompt/context artifacts
        uses: actions/upload-artifact@v4
        with:
          name: ai-prompt-context-${{ env.TODAY }}
          path: .github/ai-inputs/documentation

      # ------ AI PROMPT & DOC GENERATION ------
      - name: Read Prompt Files
        id: prompts
        run: |
          set -euxo pipefail
          echo "Reading prompt files"
          python - <<'PY'
          import os
          from pathlib import Path

          system_path = Path('.github/prompts/documentation/mud-system.md')
          if system_path.exists():
              system_prompt = system_path.read_text()
          else:
              system_prompt = (
                  'You are a technical documentation specialist for PyMUD-SS13, '
                  'a Python-based MUD server inspired by Space Station 13. '
                  'Generate comprehensive documentation including player guides, '
                  'developer documentation, and API references.'
              )

          project_context = Path('.github/ai-inputs/documentation/project-context.md').read_text()

          with open(os.environ['GITHUB_OUTPUT'], 'a') as gh_out:
              gh_out.write('system_prompt<<EOF\n')
              gh_out.write(system_prompt + '\nEOF\n')
              gh_out.write('project_context<<EOF\n')
              gh_out.write(project_context + '\nEOF\n')
          PY

      - name: Generate MUD Documentation with AI
        uses: actions/ai-inference@v1
        id: docs
        with:
          model: ${{ env.MODEL_ID }}
          system-prompt: ${{ steps.prompts.outputs.system_prompt }}
          prompt: ${{ steps.prompts.outputs.project_context }}
          max-tokens: 4000

      - name: Verify AI Output is Non-Empty
        run: |
          set -euxo pipefail
          echo "Validating AI response"
          if [ -z "${{ steps.docs.outputs.response }}" ]; then
            echo "AI output is empty. Attempting retry..."
            exit 1
          fi

      - name: Save AI Output as Artifact
        uses: actions/upload-artifact@v4
        with:
          name: ai-docs-raw-${{ env.TODAY }}
          path: .github/ai-outputs/docs/generated-docs-raw.md

      # ------ Section Extraction, Command Reference, Site Build ------
      - name: Process Generated Documentation
        run: |
          set -euxo pipefail
          echo "Processing generated docs"
          python .github/scripts/process_generated_docs.py

      - name: Generate Command Reference
        run: |
          set -euxo pipefail
          echo "Generating command reference"
          python .github/scripts/generate_command_reference.py

      - name: Generate Interactive Documentation Site
        run: |
          set -euxo pipefail
          echo "Building documentation site"
          mkdocs build --clean --site-dir site

      # ------ Link Check ------
      - name: Check Documentation Links
        uses: lycheeverse/lychee-action@v1
        with:
          args: --no-progress --exclude 'github.com/.*#.*' 'site/**/*.html'

      - name: Deploy Documentation
        uses: peaceiris/actions-gh-pages@v4
        with:
          github_token: ${{ secrets.GITHUB_TOKEN }}
          publish_dir: ./site
          cname: pymud-ss13.example.com

      - name: Upload built docs site as artifact
        uses: actions/upload-artifact@v4
        with:
          name: site-preview-${{ env.TODAY }}
          path: site

      # ------ PR Automation ------
      - name: Create Documentation PR if Changes
        env:
          DOC_BRANCH: docs-update-${{ env.TODAY }}
        uses: peter-evans/create-pull-request@v5
        with:
          token: ${{ secrets.GITHUB_TOKEN }}
          commit-message: "ðŸ“š Update game documentation"
          title: "ðŸ“š Documentation Updates - ${{ env.TODAY }}"
          body: |
            ## Documentation Updates

            This PR contains automatically generated documentation updates:

            - Updated player guides  
            - Refreshed command reference  
            - Updated API documentation  
            - Added recent changelog entries

          branch: ${{ env.DOC_BRANCH }}
          delete-branch: true

      # ------ Artifact AI Model Catalog ------
      - name: Upload available AI models catalog as artifact
        uses: actions/upload-artifact@v4
        with:
          name: ai-models-catalog-${{ env.TODAY }}
          path: .github/ai-inputs/models-catalog.json
