name: Living Documentation for PyMUD-SS13
on:
  schedule:
    - cron: '0 2 * * 1'  # Weekly updates for game wiki
  workflow_dispatch:
  push:
    paths: 
      - 'src/**'
      - 'game/**'
      - 'commands/**'
      - 'world/**'
      - 'docs/**'
      - '*.py'

jobs:
  update-docs:
    runs-on: ubuntu-latest
    permissions:
      contents: write
      models: read
    steps:
      - uses: actions/checkout@v4
        with:
          fetch-depth: 0
      
      - name: Setup Python Environment
        uses: actions/setup-python@v5
        with:
          python-version: '3.11'
      
      - name: Install Documentation Tools
        run: |
          pip install sphinx sphinx-rtd-theme autodoc pydoc-markdown
          pip install mkdocs mkdocs-material mkdocs-mermaid2-plugin
          
      - name: Analyze MUD Code Coverage
        run: |
          mkdir -p .github/ai-inputs/documentation
          
          echo "# PyMUD-SS13 Documentation Analysis" > .github/ai-inputs/documentation/project-context.md
          echo "" >> .github/ai-inputs/documentation/project-context.md
          
          # Analyze Python modules and classes
          echo "## Code Structure Analysis" >> .github/ai-inputs/documentation/project-context.md
          
          # Find undocumented Python functions and classes
          echo "### Undocumented Functions" >> .github/ai-inputs/documentation/project-context.md
          find . -name "*.py" -not -path "./venv/*" -not -path "./.git/*" | while read file; do
            # Count functions without docstrings
            undoc_funcs=$(grep -A1 "^\s*def\s" "$file" | grep -v '"""' | grep -v "def" | grep -v -- "--" | wc -l)
            undoc_classes=$(grep -A1 "^class\s" "$file" | grep -v '"""' | grep -v "class" | grep -v -- "--" | wc -l)
            
            if [ $undoc_funcs -gt 0 ] || [ $undoc_classes -gt 0 ]; then
              echo "- $file: $undoc_funcs functions, $undoc_classes classes" >> .github/ai-inputs/documentation/project-context.md
            fi
          done
          
          # Analyze game commands
          echo "" >> .github/ai-inputs/documentation/project-context.md
          echo "## Game Commands Analysis" >> .github/ai-inputs/documentation/project-context.md
          if [ -d "commands" ]; then
            find commands -name "*.py" -exec basename {} .py \; | sort >> .github/ai-inputs/documentation/project-context.md
          fi
          
          # Analyze game mechanics/systems
          echo "" >> .github/ai-inputs/documentation/project-context.md
          echo "## Game Systems" >> .github/ai-inputs/documentation/project-context.md
          for system in combat atmosphere jobs roles departments; do
            if [ -f "game/$system.py" ] || [ -f "src/$system.py" ]; then
              echo "- $system system found" >> .github/ai-inputs/documentation/project-context.md
            fi
          done
          
          # Extract recent changes for changelog
          echo "" >> .github/ai-inputs/documentation/project-context.md
          echo "## Recent Changes (Last 7 Days)" >> .github/ai-inputs/documentation/project-context.md
          git log --since="7 days ago" --pretty=format:"- %s (%h by %an)" | head -20 >> .github/ai-inputs/documentation/project-context.md
          
          # Include configuration files
          echo "" >> .github/ai-inputs/documentation/project-context.md
          echo "## Configuration" >> .github/ai-inputs/documentation/project-context.md
          for config in config.py settings.py requirements.txt setup.py; do
            if [ -f "$config" ]; then
              echo "### $config" >> .github/ai-inputs/documentation/project-context.md
              echo '```python' >> .github/ai-inputs/documentation/project-context.md
              head -30 "$config" >> .github/ai-inputs/documentation/project-context.md
              echo '```' >> .github/ai-inputs/documentation/project-context.md
            fi
          done

      - name: Generate MUD Documentation with AI
        uses: actions/ai-inference@v1
        id: docs
        with:
          model: "claude-3-7-sonnet"
          system-prompt-file: ".github/prompts/documentation/mud-system.md"
          prompt-file: ".github/ai-inputs/documentation/project-context.md"
      
      - name: Process Generated Documentation
        run: |
          mkdir -p docs/player-guide docs/admin-guide docs/developer docs/lore
          echo "${{ steps.docs.outputs.response }}" > .github/ai-outputs/docs/generated-docs-raw.md
          
          # Extract different documentation sections using Python
          python3 << 'EOF'
          import re
          import os
          import json
          
          with open('.github/ai-outputs/docs/generated-docs-raw.md', 'r') as f:
              content = f.read()
          
          # Define documentation structure for MUD
          sections = {
              'README.md': r'# README\.md\n(.*?)(?=\n# [A-Z]|\Z)',
              'docs/player-guide/GETTING_STARTED.md': r'# GETTING_STARTED\.md\n(.*?)(?=\n# [A-Z]|\Z)',
              'docs/player-guide/COMMANDS.md': r'# COMMANDS\.md\n(.*?)(?=\n# [A-Z]|\Z)',
              'docs/player-guide/JOBS.md': r'# JOBS\.md\n(.*?)(?=\n# [A-Z]|\Z)',
              'docs/admin-guide/ADMIN_COMMANDS.md': r'# ADMIN_COMMANDS\.md\n(.*?)(?=\n# [A-Z]|\Z)',
              'docs/developer/API.md': r'# API\.md\n(.*?)(?=\n# [A-Z]|\Z)',
              'docs/developer/ARCHITECTURE.md': r'# ARCHITECTURE\.md\n(.*?)(?=\n# [A-Z]|\Z)',
              'docs/developer/CONTRIBUTING.md': r'# CONTRIBUTING\.md\n(.*?)(?=\n# [A-Z]|\Z)',
              'docs/lore/STATION_LORE.md': r'# STATION_LORE\.md\n(.*?)(?=\n# [A-Z]|\Z)',
          }
          
          for filepath, pattern in sections.items():
              match = re.search(pattern, content, re.DOTALL)
              if match:
                  os.makedirs(os.path.dirname(filepath), exist_ok=True)
                  with open(filepath, 'w') as f:
                      f.write(match.group(1).strip())
                  print(f"Created: {filepath}")
          EOF
      
      - name: Generate Command Reference
        run: |
          # Auto-generate command documentation from code
          python3 << 'EOF'
          import os
          import ast
          import json
          
          commands = {}
          
          # Scan for command files
          for root, dirs, files in os.walk('.'):
              if 'commands' in root or 'cmd' in root:
                  for file in files:
                      if file.endswith('.py') and not file.startswith('_'):
                          filepath = os.path.join(root, file)
                          try:
                              with open(filepath, 'r') as f:
                                  tree = ast.parse(f.read())
                                  
                              for node in ast.walk(tree):
                                  if isinstance(node, ast.ClassDef):
                                      # Extract command info from docstring
                                      docstring = ast.get_docstring(node)
                                      if docstring:
                                          commands[node.name] = {
                                              'file': filepath,
                                              'description': docstring.split('\n')[0],
                                              'full_doc': docstring
                                          }
                          except:
                              pass
          
          # Generate markdown command reference
          with open('docs/player-guide/COMMAND_REFERENCE.md', 'w') as f:
              f.write("# Command Reference\n\n")
              f.write("Auto-generated command documentation for PyMUD-SS13\n\n")
              
              for cmd_name, info in sorted(commands.items()):
                  f.write(f"## {cmd_name}\n\n")
                  f.write(f"{info['description']}\n\n")
                  f.write(f"```\n{info['full_doc']}\n```\n\n")
          EOF
          
      - name: Generate Interactive Documentation Site
        run: |
          # Create MkDocs configuration
          cat > mkdocs.yml << 'EOL'
          site_name: PyMUD-SS13 Documentation
          site_description: A Python MUD inspired by Space Station 13
          site_author: yakuzadave
          repo_url: https://github.com/yakuzadave/pymud-ss13
          
          theme:
            name: material
            palette:
              - scheme: slate
                primary: deep purple
                accent: cyan
            features:
              - navigation.tabs
              - navigation.sections
              - navigation.expand
              - search.suggest
              - content.code.copy
          
          plugins:
            - search
            - mermaid2
          
          nav:
            - Home: README.md
            - Player Guide:
                - Getting Started: player-guide/GETTING_STARTED.md
                - Commands: player-guide/COMMANDS.md
                - Command Reference: player-guide/COMMAND_REFERENCE.md
                - Jobs & Roles: player-guide/JOBS.md
            - Admin Guide:
                - Admin Commands: admin-guide/ADMIN_COMMANDS.md
            - Developer:
                - API Reference: developer/API.md
                - Architecture: developer/ARCHITECTURE.md
                - Contributing: developer/CONTRIBUTING.md
            - Lore:
                - Station Lore: lore/STATION_LORE.md
          
          markdown_extensions:
            - pymdownx.highlight
            - pymdownx.superfences:
                custom_fences:
                  - name: mermaid
                    class: mermaid
                    format: !!python/name:pymdownx.superfences.fence_code_format
            - admonition
            - codehilite
            - toc:
                permalink: true
          EOL
          
          # Build the documentation site
          cd docs && mkdocs build -d ../site
      
      - name: Generate API Documentation
        run: |
          # Generate Sphinx documentation for Python API
          mkdir -p docs/api
          
          # Create Sphinx configuration
          cat > docs/conf.py << 'EOL'
          project = 'PyMUD-SS13'
          author = 'yakuzadave'
          extensions = ['sphinx.ext.autodoc', 'sphinx.ext.napoleon', 'sphinx.ext.viewcode']
          html_theme = 'sphinx_rtd_theme'
          EOL
          
          # Generate API docs
          sphinx-apidoc -o docs/api src/
          cd docs && sphinx-build -b html . _build/html
      
      - name: Create Game Status Dashboard
        run: |
          # Generate a simple status page
          cat > docs/status.md << 'EOL'
          # PyMUD-SS13 Status
          
          ## Server Statistics
          - Last Updated: $(date)
          - Python Version: $(python --version)
          - Total Commands: $(find . -path ./venv -prune -o -name "*.py" -exec grep -l "class.*Command" {} \; | wc -l)
          - Total Game Files: $(find . -name "*.py" | wc -l)
          
          ## Recent Activity
          $(git log --pretty=format:"- %s (%ar)" -10)
          EOL
      
      - name: Deploy Documentation
        uses: peaceiris/actions-gh-pages@v4
        with:
          github_token: ${{ secrets.GITHUB_TOKEN }}
          publish_dir: ./site
          cname: pymud-ss13.example.com  # Update with your domain
      
      - name: Create Documentation PR if Changes
        uses: peter-evans/create-pull-request@v5
        with:
          token: ${{ secrets.GITHUB_TOKEN }}
          commit-message: "📚 Update game documentation"
          title: "📚 Documentation Updates - $(date +'%Y-%m-%d')"
          body: |
            ## Documentation Updates
            
            This PR contains automatically generated documentation updates:
            
            - Updated player guides
            - Refreshed command reference
            - Updated API documentation
            - Added recent changelog entries
            
            Please review the changes before merging.
          branch: docs-update-$(date +'%Y%m%d')
          delete-branch: true