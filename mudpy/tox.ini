# Copyright (c) 2016-2022 mudpy authors. Permission to use, copy,
# modify, and distribute this software is granted under terms
# provided in the LICENSE file distributed with this software.

[tox]
minversion = 3.18
envlist = bandit, codespell, dist, docs, flake8, yamllint, selftest_config, py3
skipsdist = True
ignore_basepython_conflict = True

[testenv]
description = run the functional selftest with optimized configuration
basepython = python3
# Warnings are treated as errors by default. Specific deprecations are
# temporarily ignored until upstream libraries resolve them.
setenv =
    PYTHONWARNDFAULTENCODING = 1
    PYTHONWARNINGS = error, ignore:Creating a LegacyVersion has been deprecated and will be removed in the next major release:DeprecationWarning, ignore:setup.py install is deprecated. Use build and pip and other standards-based tools., ignore:easy_install command is deprecated. Use build and pip and other standards-based tools., ignore:'crypt' is deprecated and slated for removal in Python 3.13:DeprecationWarning:passlib.utils, ignore:'telnetlib' is deprecated and slated for removal in Python 3.13:DeprecationWarning:mudpy.tests.selftest, ignore:Support for `[tool.setuptools]` in `pyproject.toml` is still *beta*.:Warning:setuptools.config.pyprojecttoml
    PYTHONUTF8 = 1
    VIRTUALENV_CREATOR = venv
commands = mudpy_selftest mudpy/tests/fixtures/test_daemon.yaml
download = true
deps = {toxinidir}

[testenv:bandit]
description = check for potential security risks in source code
skip_install = True
deps = bandit
commands = bandit -r mudpy -x mudpy/tests {posargs}

[testenv:codespell]
description = find common spelling mistakes in code and documentation
skip_install = True
deps = codespell
commands = codespell {posargs}

[testenv:demo]
description = start an interactive demo with the sample config
commands = mudpy {posargs}

[testenv:dist]
description = build release artifacts and check for conformance
skip_install = True
deps =
    build
    twine
commands =
    {envpython} -c "import shutil; shutil.rmtree('{toxinidir}/dist', ignore_errors=True)"
    {envpython} -m build
    twine check --strict {toxinidir}/dist/*

[testenv:docs]
# Build an sdist into a temporary location so we'll have AUTHORS and ChangeLog
# files to include.
description = generate hypertext documentation
deps =
    {[testenv]deps}
    build
    sphinx
commands =
    {envpython} -c "import shutil; shutil.rmtree('{toxinidir}/doc/build', ignore_errors=True)"
    {envpython} -m build --outdir={toxinidir}/doc/build/dist --sdist
    sphinx-build -W -d doc/build/doctrees -b html doc/source/ doc/build/html

[testenv:flake8]
description = style checks and static analysis of source code
skip_install = True
deps = flake8-bugbear
commands = flake8 {posargs}

[testenv:selftest_config]
description = run the selftest with the included sample config
commands = mudpy_selftest etc/mudpy.yaml

[testenv:yamllint]
# Run the selftest before checking YAML files so we'll be sure to also catch at
# least some which are generated by the application, making sure it creates
# them with the same style we enforce for those carried in the repository.
description = test data files for correct syntax and formatting
deps =
    {[testenv]deps}
    yamllint
commands =
    mudpy_selftest mudpy/tests/fixtures/test_daemon.yaml
    yamllint --strict {posargs} .

[flake8]
show-source = True
exclude = .git, .tox, *lib/python*, *egg, build
